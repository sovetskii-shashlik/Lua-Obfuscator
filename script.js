// Theme toggle logic (unchanged)
const themeToggle = document.getElementById('themeToggle');
themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const isDark = document.body.classList.contains('dark-theme');
    themeToggle.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    localStorage.setItem('darkTheme', isDark);
});
if (localStorage.getItem('darkTheme') === 'true') {
    document.body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
}

// Random integer generation (unchanged logic, range handled in obfuscate)
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
     // Ensure result is within range, including min and max
    let result = Math.floor(Math.random() * (max - min + 1)) + min;
    // Added check to ensure multiplier is not 1 if min is 1 (for safety, though range 1000-10000 doesn't need it)
    // For multiply, we need result > 1. For offset, 0 is fine but min=1000 prevents it.
    // The range 1000-10000 naturally avoids 0 and 1.
    return result;
}

// --- OBFUSCATION FUNCTION ---
function obfuscate(method, inputText) {
    const input = inputText || document.getElementById("input").value.trim();
    const outputElement = document.getElementById("output"); // Get output element

    // –ü—Ä–∏ –ø—É—Å—Ç–æ–º –≤–≤–æ–¥–µ –ø—Ä–æ—Å—Ç–æ –∞–ª–µ—Ä—Ç –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
    if (!input && !inputText) {
        alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        outputElement.textContent = ''; // –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥
        outputElement.style.borderColor = "#4CAF50"; // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏
        return "";
    }

    if (!inputText) { // Clear output and statuses only if called by user button
        outputElement.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'; // –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        outputElement.style.borderColor = "#4CAF50"; // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        document.getElementById("status").textContent = '';
        document.getElementById("statusV2").textContent = '';
        document.getElementById("statusV3").textContent = '';
    } else {
        // –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏, –æ—á–∏—â–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ v1
        // –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç —Å–≤–æ–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    }

    let output = "";
    try {
        if (method === "ascii") { let e = ""; for (let i = 0; i < input.length; i++) e += "\\" + input.charCodeAt(i); output = `loadstring("${e}")()`; }
        else if (method === "hex") { let h = ""; for (let i = 0; i < input.length; i++) h += "\\x" + input.charCodeAt(i).toString(16).padStart(2, "0"); output = `loadstring("${h}")()`; }
        else if (method === "unicode") { let u = ""; for (let i = 0; i < input.length; i++) u += "\\u{" + input.charCodeAt(i).toString(16).padStart(4, "0") + "}"; output = `loadstring("${u}")()`; }
        else if (method === "number") { let n = []; for (let i = 0; i < input.length; i++) n.push(input.charCodeAt(i)); output = `loadstring(string.char(${n.join(",")}))()`; }
        else if (method === "base3") { let b = []; for (let i = 0; i < input.length; i++) b.push(input.charCodeAt(i).toString(3).padStart(6, '0')); output = `loadstring((function() local s="" for t in ("${b.join('')}"):gmatch("%d%d%d%d%d%d") do s=s..string.char(tonumber(t,3)) end return s end)())()`; }
        else if (method === "binary") { let b = ""; for (let i = 0; i < input.length; i++) b += input.charCodeAt(i).toString(2).padStart(8, '0'); output = `loadstring((function() local s="" for c in ("${b}"):gmatch("%d%d%d%d%d%d%d%d") do s=s..string.char(tonumber(c,2)) end return s end)())()`; }
        else if (method === "base4") { let b = []; for (let i = 0; i < input.length; i++) b.push(input.charCodeAt(i).toString(4).padStart(4, '0')); output = `loadstring((function() local s="" for t in ("${b.join('')}"):gmatch("%d%d%d%d") do s=s..string.char(tonumber(t,4)) end return s end)())()`; }
        else if (method === "base5") { let b = []; for (let i = 0; i < input.length; i++) b.push(input.charCodeAt(i).toString(5).padStart(4, '0')); output = `loadstring((function() local s="" for t in ("${b.join('')}"):gmatch("%d%d%d%d") do s=s..string.char(tonumber(t,5)) end return s end)())()`; }
        // –°–µ–º–µ—Ä–∏—á–Ω–∞—è (Base 7) –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è - –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞
        else if (method === "octal") {
             let o = [];
             for (let i = 0; i < input.length; i++) {
                 // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É Base 7, –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –¥–æ 3 —Ü–∏—Ñ—Ä (—Ç.–∫. 255 –≤ Base 7 = 513)
                 o.push(input.charCodeAt(i).toString(7).padStart(3, '0'));
             }
             // Lua-–∫–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 3 —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ Base 7
             output = `loadstring((function() local s="" for t in ("${o.join('')}"):gmatch("%d%d%d") do s=s..string.char(tonumber(t,7)) end return s end)())()`;
        }
         // –í–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è (Base 8) –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è - –ù–û–í–ê–Ø
         else if (method === "octal8") {
             let o = [];
             for (let i = 0; i < input.length; i++) {
                 // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É Base 8, –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –¥–æ 3 —Ü–∏—Ñ—Ä (—Ç.–∫. 255 –≤ Base 8 = 377)
                 o.push(input.charCodeAt(i).toString(8).padStart(3, '0'));
             }
             // Lua-–∫–æ–¥ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 3 —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ Base 8
             output = `loadstring((function() local s="" for t in ("${o.join('')}"):gmatch("%d%d%d") do s=s..string.char(tonumber(t,8)) end return s end)())()`;
         }
        else if (method === "interleave") { let p=[[],[]]; for(let i=0;i<input.length;i++)p[i%2].push(input.charCodeAt(i)); output = `loadstring((function(a,b)local s=''for i=1,math.max(#a,#b)do if a[i]then s=s..string.char(a[i])end if b[i]then s=s..string.char(b[i])end end return s end)({${p[0].join(',')}},{${p[1].join(',')}}))()`; }
        else if (method === "prime") { const pr=[2,3,5,7,11,13,17,19,23,29]; let t=[]; for(let i=0;i<input.length;i++){const p=pr[i%pr.length];t.push(input.charCodeAt(i)*p);t.push(p);} output = `loadstring((function(t)local s=''for i=1,#t,2 do s=s..string.char(t[i]//t[i+1])end return s end)({${t.join(',')}}))()`; }
        else if (method === "offset") { const of=5; let t=[]; for(let i=0;i<input.length;i++)t.push(input.charCodeAt(i)+of); output = `loadstring(string.char(${t.join(',')}):gsub('.',function(c)return string.char(c:byte()-${of})end))()`; }
        else if (method === "multiply") { const mu=2; let t=[]; for(let i=0;i<input.length;i++)t.push(input.charCodeAt(i)*mu); output = `loadstring(string.char(${t.join(',')}):gsub('.',function(c)return string.char(c:byte()//${mu})end))()`; }

        // --- Random Obfuscation with Large Range (Logic unchanged) ---
        else if (method === "random_offset") {
             const ov = getRandomInt(1000, 10000);
             let t = [];
             for (let i = 0; i < input.length; i++) {
                 let offsettedCode = input.charCodeAt(i) + ov;
                 t.push(offsettedCode);
             }
             output = `loadstring((function(codes, offset) local s = ''; for i = 1, #codes do s = s .. string.char(codes[i] - offset) end return s end)({${t.join(',')}}, ${ov}))()`;
        }
        else if (method === "random_multiply") {
             let mv;
             do { mv = getRandomInt(1000, 10000); } while (mv === 0 || mv === 1);
             let t = [];
             for (let i = 0; i < input.length; i++) {
                  let multipliedCode = input.charCodeAt(i) * mv;
                 t.push(multipliedCode);
             }
             output = `loadstring((function(codes, multiplier) local s = ''; for i = 1, #codes do s = s .. string.char(math.floor(codes[i] / multiplier)) end return s end)({${t.join(',')}}, ${mv}))()`;
        }
        // --- End Random Obfuscation ---

        else { console.warn("Unknown method:", method); output = `--[[ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${method} ]]`; }
    } catch (error) {
         console.error(`Error during ${method} obfuscation:`, error);
         output = `--[[ –û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (${method}): ${error.message} ]]`;
         // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ output
         if (!inputText) { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —à–∞–≥ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
            outputElement.textContent = output;
            outputElement.style.borderColor = "#ff9800"; // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
         }
         return ""; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
    }

    // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º output, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —à–∞–≥ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
     if (!inputText) {
        outputElement.textContent = output;
        outputElement.style.borderColor = "#4CAF50"; // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    }
    return output; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
}

// --- Multi-Layer Functions (Logic unchanged, relies on updated obfuscate) ---
// –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç —Å—Ç–∞—Ç—É—Å–∞–º–∏
function startMultiLayerObfuscation() {
    const input = document.getElementById("input").value.trim();
    const outputElement = document.getElementById("output");
    if (!input) { alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!"); return; }

    outputElement.textContent = '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ v1...';
    outputElement.style.borderColor = "#4CAF50";

    const btn = document.getElementById("multiObfuscateBtn");
    const status = document.getElementById("status");
    document.getElementById("statusV2").textContent = ''; document.getElementById("statusV3").textContent = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—Å–∏–π

    btn.disabled = true; btn.classList.add("processing"); btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v1..."; status.textContent = "–ó–∞–ø—É—Å–∫ v1...";
    let currentCode = input; const steps = [ { method: "random_offset", name: "–°–º–µ—â–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "unicode", name: "Unicode" }, { method: "base3", name: "Base3" } ]; let step = 0;
    function processNextStep() {
        if (step >= steps.length) { btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v1"; status.textContent = "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; return; }
        const currentMethod = steps[step]; status.textContent = `v1 –®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`; const obfuscatedStep = obfuscate(currentMethod.method, currentCode);
        if (obfuscatedStep === "" || obfuscatedStep.startsWith('--[[')) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—à–∏–±–∫–∏
            status.textContent = `v1 –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step + 1}. –ü—Ä–µ—Ä–≤–∞–Ω–æ.`;
            btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v1";
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ outputElement –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ obfuscate
            outputElement.style.borderColor = "#ff9800";
            return;
        }
        currentCode = obfuscatedStep; outputElement.textContent = currentCode; outputElement.style.borderColor = "#4CAF50"; step++; setTimeout(processNextStep, 500);
    } processNextStep();
}
function startMultiLayerObfuscationV2() {
     const input = document.getElementById("input").value.trim();
     const outputElement = document.getElementById("output");
     if (!input) { alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!"); return; }

     outputElement.textContent = '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ v2...';
     outputElement.style.borderColor = "#4CAF50";

     const btn = document.getElementById("multiObfuscateBtnV2"); const status = document.getElementById("statusV2");
     document.getElementById("status").textContent = ''; document.getElementById("statusV3").textContent = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—Å–∏–π

     btn.disabled = true; btn.classList.add("processing"); btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v2..."; status.textContent = "–ó–∞–ø—É—Å–∫ v2...";
     let currentCode = input; const steps = [ { method: "prime", name: "–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ" }, { method: "hex", name: "HEX" }, { method: "random_multiply", name: "–£–º–Ω–æ–∂–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "base4", name: "Base4" } ]; let step = 0;
     function processNextStep() {
         if (step >= steps.length) { btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v2"; status.textContent = "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; return; }
         const currentMethod = steps[step]; status.textContent = `v2 –®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`; const obfuscatedStep = obfuscate(currentMethod.method, currentCode);
         if (obfuscatedStep === "" || obfuscatedStep.startsWith('--[[')) {
            status.textContent = `v2 –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step + 1}. –ü—Ä–µ—Ä–≤–∞–Ω–æ.`;
            btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v2";
            outputElement.style.borderColor = "#ff9800";
            return;
         }
         currentCode = obfuscatedStep; outputElement.textContent = currentCode; outputElement.style.borderColor = "#4CAF50"; step++; setTimeout(processNextStep, 500);
     } processNextStep();
}
function startMultiLayerObfuscationV3() {
     const input = document.getElementById("input").value.trim();
     const outputElement = document.getElementById("output");
     if (!input) { alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!"); return; }

     outputElement.textContent = '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ v3...';
     outputElement.style.borderColor = "#4CAF50";

     const btn = document.getElementById("multiObfuscateBtnV3"); const status = document.getElementById("statusV3");
     document.getElementById("status").textContent = ''; document.getElementById("statusV2").textContent = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—Å–∏–π

     btn.disabled = true; btn.classList.add("processing"); btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v3..."; status.textContent = "–ó–∞–ø—É—Å–∫ v3...";
     let currentCode = input; const steps = [ { method: "random_offset", name: "–°–º–µ—â–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "hex", name: "HEX" }, { method: "base5", name: "Base5" }, { method: "random_multiply", name: "–£–º–Ω–æ–∂–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "binary", name: "Binary" } ]; let step = 0;
     function processNextStep() {
         if (step >= steps.length) { btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v3"; status.textContent = "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; return; }
         const currentMethod = steps[step]; status.textContent = `v3 –®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`; const obfuscatedStep = obfuscate(currentMethod.method, currentCode);
         if (obfuscatedStep === "" || obfuscatedStep.startsWith('--[[')) {
            status.textContent = `v3 –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step + 1}. –ü—Ä–µ—Ä–≤–∞–Ω–æ.`;
            btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v3";
            outputElement.style.borderColor = "#ff9800";
            return;
         }
         currentCode = obfuscatedStep; outputElement.textContent = currentCode; outputElement.style.borderColor = "#4CAF50"; step++; setTimeout(processNextStep, 500);
     } processNextStep();
}


// --- DEOBFUSCATION FUNCTION (–£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ) ---
function deobfuscate() {
    const input = document.getElementById("input").value.trim();
    const outputElement = document.getElementById("output");

    // Clear statuses
    document.getElementById("status").textContent = '';
    document.getElementById("statusV2").textContent = '';
    document.getElementById("statusV3").textContent = '';

    if (!input) {
        alert("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        outputElement.textContent = ''; // –û—á–∏—â–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –≤–≤–æ–¥–µ
        outputElement.style.borderColor = "#4CAF50"; // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏
        return;
    }

    outputElement.textContent = '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è...'; // –°—Ç–∞—Ç—É—Å –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
    outputElement.style.borderColor = "#2196F3"; // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ

    let output = "";
    let deobfuscated = false;

    try {
         // --- Pattern matching order (complex to simple) ---

         // 1. Check for complex function structures (random_offset/multiply, interleave, prime)
         // New random offset/multiply structure
         const newRandomMatch = input.match(/loadstring\s*\(\s*\(function\(codes,\s*(offset|multiplier)\)\s*local s = ''; for i = 1, #codes do s = s \.\. string\.char\((?:codes\[i\]\s*-\s*\1|\s*math\.floor\(codes\[i\]\s*\/\s*\2\))\) end return s end\)\(\{([\d,\s]*)\},\s*(\d+)\)\)\(\)/s);
         if (!deobfuscated && newRandomMatch) {
              const type = newRandomMatch[1]; // 'offset' or 'multiplier'
              const codesStr = newRandomMatch[3].trim(); // Captured codes array string
              const value = parseInt(newRandomMatch[4]); // Captured offset/multiplier value
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–∞–∑—É
              const codes = (codesStr === '') ? [] : codesStr.split(',').map(s => Number(s.trim())).filter(n => !isNaN(n));

              if (!isNaN(value) && (type === 'offset' ? value > 0 : value !== 0)) { // Value should be > 0 for offset, non-zero for multiplier
                   codes.forEach(code => {
                        if (!isNaN(code)) { // Double check code is number
                            let originalCode;
                            if (type === 'offset') {
                                originalCode = code - value; // Subtract offset
                            } else { // type === 'multiplier'
                                 if (value === 0) throw new Error("–î–µ–ª–∏—Ç–µ–ª—å 0 –ø—Ä–∏ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.");
                                originalCode = Math.floor(code / value); // Integer divide by multiplier
                            }
                             // Basic validation: check if result is within typical byte range
                             if (originalCode >= 0 && originalCode <= 255) {
                                  output += String.fromCharCode(originalCode);
                             } else {
                                  console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è ${type}: –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-255 (${originalCode}).`);
                                  throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è ${type}: –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-255 (${originalCode}).`);
                             }
                        } else {
                             throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è ${type}: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ (${code}).`);
                        }
                   });
                   deobfuscated = true; // Mark as deobfuscated if successful
              } else {
                   // Value was not valid, let other patterns try (though unlikely to match)
                    // No need to throw/return here, just don't mark deobfuscated.
              }
         }

         // Interleave
         if (!deobfuscated && input.includes("math.max(#a,#b)") && input.includes("loadstring") && input.includes("string.char(a[i])")) {
             const m=input.match(/loadstring\s*\(\s*\(function\(a,b\)\s*local s=''for i=1,math\.max\(#a,#b\)do if a\[i\]then s=s\.\.string\.char\(a\[i\]\)end if b\[i\]then s=s\.\.string\.char\(b\[i]\)end end return s end\)\(\{([\d,\s]*)\}\s*,\s*\{([\d,\s]*)\}\)\)\(\)/s);
             if(m&&(m[1]!==undefined)&&(m[2]!==undefined)){
                const s1=m[1].trim();
                const s2=m[2].trim();
                const a1=(s1==='')?[]:s1.split(',').map(x=>Number(x.trim())).filter(n => !isNaN(n));
                const a2=(s2==='')?[]:s2.split(',').map(x=>Number(x.trim())).filter(n => !isNaN(n));
                for(let i=0;i<Math.max(a1.length,a2.length);i++){
                   if(i<a1.length){
                       if(!isNaN(a1[i]) && a1[i] >= 0 && a1[i] <= 255) output+=String.fromCharCode(a1[i]);
                       else throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è interleave: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ a (${a1[i]}).`);
                   }
                   if(i<a2.length){
                       if(!isNaN(a2[i]) && a2[i] >= 0 && a2[i] <= 255) output+=String.fromCharCode(a2[i]);
                       else throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è interleave: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ b (${a2[i]}).`);
                   }
                }
                deobfuscated=true;
            }
         }

         // Prime
         if (!deobfuscated && input.includes("t[i]//t[i+1]") && input.includes("loadstring")) {
              const m=input.match(/loadstring\s*\(\s*\(function\(t\)\s*local s=''for i=1,#t,2 do s=s\.\.string\.char\(t\[i\]\/\/\s*t\[i\+1\]\)end return s end\)\(\{([\d,\s]*)\}\)\)\(\)/s);
              if(m&&(m[1]!==undefined)){
                 const s=m[1].trim();
                 if(s===''){
                     output=""; // Handle empty array case
                 } else {
                    const n=s.split(',').map(x=>Number(x.trim())).filter(v => !isNaN(v)); // Filter NaN
                    if(n.length%2!==0)throw new Error("–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.");
                    for(let i=0;i<n.length;i+=2){
                        const v=n[i];
                        const p=n[i+1];
                        if(!isNaN(v)&&!isNaN(p)&&p!==0){
                            const charCode = Math.floor(v/p); // Lua // is integer division
                            if (charCode >= 0 && charCode <= 255) output+=String.fromCharCode(charCode);
                            else throw new Error(`–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ (${charCode}).`);
                        } else throw new Error(`–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞ (${v}, ${p}).`);
                    }
                 }
                 deobfuscated=true;
            }
         }


         // 2. Check for gsub patterns (old offset/multiply)
         // Check for OLD random offset/multiply structure (string.char(...):gsub) - renamed from oldRandomMatch
         if (!deobfuscated && input.includes(":gsub('.',function(c)") && input.includes("c:byte()") && input.includes("loadstring")) {
              const charCodeMatch = input.match(/string\.char\(([\d,\s]*)\)/);
              // Regex for the OLD structure: c:byte() - val OR c:byte() // val
              const gsubFuncMatch = input.match(/function\(c\)\s*return\s*string\.char\(\s*c:byte\(\)\s*(?:-\s*(\d+)|(?:\s*\/\/\s*(\d+)))\s*\)/);

              if (charCodeMatch && (charCodeMatch[1] !== undefined) && gsubFuncMatch) {
                  const codesStr = charCodeMatch[1].trim();
                  const codes = (codesStr === '') ? [] : codesStr.split(',').map(s => Number(s.trim())).filter(n => !isNaN(n)); // Filter NaN
                  let value = 0; let isOffset = false;
                  let foundValue = false;

                  if (gsubFuncMatch[1] !== undefined) {
                      value = parseInt(gsubFuncMatch[1]);
                      isOffset = true;
                      foundValue = !isNaN(value) && value > 0; // Offset should be > 0
                  }
                  else if (gsubFuncMatch[2] !== undefined) {
                      value = parseInt(gsubFuncMatch[2]);
                      isOffset = false;
                       foundValue = !isNaN(value) && value !== 0; // Multiplier should be non-zero
                  }

                  if (foundValue) {
                       if (!isOffset && value === 0) throw new Error("–î–µ–ª–∏—Ç–µ–ª—å 0 (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç).");
                       codes.forEach(code => {
                            if (!isNaN(code)) {
                                 let originalCode;
                                 if (isOffset) { originalCode = code - value; } // Subtract offset
                                 else { originalCode = Math.floor(code / value); } // Integer divide by multiplier
                                 // The old format often produced codes > 255. This check is needed.
                                 if (originalCode >= 0 && originalCode <= 255) {
                                      output += String.fromCharCode(originalCode);
                                 } else {
                                      console.warn(`–î–µobfuscation (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): Code out of range 0-255 (${originalCode}). Input: ${code}, Value: ${value}, Type: ${isOffset ? 'Offset' : 'Multiply'}`);
                                      throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-255 (${originalCode}). –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.`);
                                 }
                            } else { throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤ –º–∞—Å—Å–∏–≤–µ (${code}).`); }
                       });
                       deobfuscated = true;
                  }
                   // If !foundValue, let other patterns try.
              }
         }


         // 3. Check for base encoding patterns (tonumber(t, base))
         const baseMethods = [
             {b:3, p:/tonumber\(t,3\)/, v:/^[012]+$/, c:6},
             {b:2, p:/tonumber\(b,2\)/, v:/^[01]+$/, c:8},
             {b:4, p:/tonumber\(t,4\)/, v:/^[0-3]+$/, c:4},
             {b:5, p:/tonumber\(t,5\)/, v:/^[0-4]+$/, c:4},
             {b:7, p:/tonumber\(t,7\)/, v:/^[0-6]+$/, c:3}, // Base 7
             {b:8, p:/tonumber\(t,8\)/, v:/^[0-7]+$/, c:3}  // Base 8
         ];
         for (const bm of baseMethods) {
              // Check if the pattern for the base is present AND it looks like a gmatch structure
              if (!deobfuscated && bm.p.test(input) && input.includes(":gmatch") && input.includes("loadstring")) {
                  const strMatch = input.match(/"([0-9]*)"/);
                   // Attempt to capture chunk detail from gmatch regex
                   const gmatchDetailMatch = input.match(/:gmatch\("([^"]+)"\)/);
                   // Determine chunk size: use captured size if valid, otherwise use default from bm
                   const chunkSize = gmatchDetailMatch && gmatchDetailMatch[1] && gmatchDetailMatch[1].length > 0 ? gmatchDetailMatch[1].length : bm.c;

                  if (strMatch && strMatch[1] !== undefined) {
                       const baseStr = strMatch[1];
                       if (baseStr === "") { output = ""; deobfuscated = true; break;} // Handle empty string case
                       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –ò –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è —á–∞–Ω–∫–æ–≤ –ò —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ > 0
                       if (bm.v.test(baseStr) && chunkSize > 0 && baseStr.length % chunkSize === 0) {
                           for (let i = 0; i < baseStr.length; i += chunkSize) {
                               const chunk = baseStr.substr(i, chunkSize);
                               const charCode = parseInt(chunk, bm.b);
                                if (!isNaN(charCode) && charCode >= 0 && charCode <= 255) { // Validate code range
                                    output += String.fromCharCode(charCode);
                                } else {
                                     throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è Base${bm.b}: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –≤–Ω–µ–¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–π –∫–æ–¥ (${charCode}) –∏–∑ —á–∞–Ω–∫–∞ "${chunk}".`);
                                }
                           }
                           deobfuscated = true;
                           break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ baseMethods, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—à–ª–∏ –∏ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–ª–∏
                       }
                       // If regex matches but validation (v.test or chunk length) fails,
                       // it might be a false positive, so don't mark as deobfuscated.
                  }
              }
         }


         // 4. Check for simple loadstring("escaped string") patterns
         // ASCII (\ddd)
         // Added loadstring check to all simple escape patterns
         if (!deobfuscated && /loadstring\s*\(\s*["'](?:\\\d{1,3})+["']\s*\)\(\)/s.test(input) && input.includes("loadstring")) {
            const m = input.match(/loadstring\s*\(\s*["']((?:\\\d{1,3})+)["']\s*\)/);
            if (m && m[1]) {
                output = m[1].replace(/\\(\d{1,3})/g, (x, d) => {
                     const charCode = parseInt(d, 10);
                     if (!isNaN(charCode) && charCode >= 0 && charCode <= 255) return String.fromCharCode(charCode);
                     throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è ASCII: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (${d}).`);
                });
                deobfuscated = true;
            }
         }
         // HEX (\xNN)
         if (!deobfuscated && input.includes("\\x") && input.includes("loadstring")) {
             const m=input.match(/loadstring\s*\(\s*["']((?:\\x[0-9a-fA-F]{2})+)["']\s*\)/);
             if(m&&m[1]){
                 output=m[1].replace(/\\x([0-9a-fA-F]{2})/g,(x,h)=>{
                     const charCode = parseInt(h,16);
                     if (!isNaN(charCode) && charCode >= 0 && charCode <= 255) return String.fromCharCode(charCode);
                     throw new Error(`–î–µobfuscation HEX: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (${h}).`);
                 });
                 deobfuscated = true;
             }
         }
         // Unicode (\u{NNNN})
         if (!deobfuscated && input.includes("\\u{") && input.includes("loadstring")) {
             // Check for both single and double quotes
             let m = input.match(/loadstring\s*\(\s*["']((?:\\u\{[0-9a-fA-F]+\})+)"'\s*\)/); // Try double quotes first
              if (!m) { // If double quotes didn't match, try single quotes
                 m = input.match(/loadstring\s*\(\s*[']((?:\\u\{[0-9a-fA-F]+\})+)'\s*\)/);
             }

             if(m&&m[1]){
                 output=m[1].replace(/\\u\{([0-9a-fA-F]+)\}/g,(x,c)=>{
                     const charCode = parseInt(c,16);
                     // Unicode can be > 255, but Lua string.char limits? Let's allow higher for deobfuscation fidelity.
                     if (!isNaN(charCode)) return String.fromCharCode(charCode);
                     throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è Unicode: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (${c}).`);
                 });
                 deobfuscated = true;
             }
         }
         // string.char(...) - This is simple, but also a substring of other methods.
         // Keep it later in the checks.
         if (!deobfuscated && input.includes("string.char(") && input.includes("loadstring")) {
              // Check for the direct loadstring(string.char(...))() pattern
              const m=input.match(/loadstring\s*\(\s*string\.char\(([\d,\s]*)\)\)\(\)/s); // Precise regex for this specific pattern
              if(m && m[1] !== undefined){
                  const s=m[1].trim();
                  if(s===''){
                      output="";
                  } else {
                      const c=s.split(',').map(x=>Number(x.trim())).filter(n => !isNaN(n)); // Filter NaN
                      c.forEach(cd=>{
                          if(!isNaN(cd) && cd >= 0 && cd <= 255) output+=String.fromCharCode(cd);
                          else throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è string.char: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (${cd}).`);
                      });
                  }
                  deobfuscated=true;
              }
              // If the precise pattern didn't match, it might be string.char part of a complex method, so don't mark deobfuscated.
         }


         // 5. Fallback: try to extract string from loadstring argument if no other pattern matched
         // THIS IS POTENTIALLY DANGEROUS. Only as a last resort.
         if (!deobfuscated) {
             const m = input.match(/loadstring\(\s*["'](.*?)["']\s*\)\(\)/s); // Match loadstring("...") or loadstring('...')
             if (m && m[1] !== undefined) {
                 // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Lua escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤
                 output = m[1].replace(/\\"/g,'"')
                             .replace(/\\'/g,"'")
                             .replace(/\\\\/g,"\\")
                             .replace(/\\n/g,"\n")
                             .replace(/\\t/g,"\t")
                             .replace(/\\r/g,"\r")
                             .replace(/\\f/g,"\f")
                             .replace(/\\v/g,"\v");

                 // Attempt to decode numeric/hex/unicode escapes IF they weren't handled by specific patterns earlier
                 // This might be redundant if the specific patterns worked, but safer here.
                 output = output.replace(/\\(\d{1,3})/g, (m, num) => {
                     const charCode = parseInt(num, 10);
                     if (!isNaN(charCode) && charCode >= 0 && charCode <= 255) return String.fromCharCode(charCode);
                     console.warn(`Fallback: Could not decode numeric escape \\${num}.`);
                     return m; // Return original escape sequence if invalid
                 })
                 .replace(/\\x([0-9a-fA-F]{2})/g, (m, hex) => {
                      const charCode = parseInt(hex,16);
                      if (!isNaN(charCode) && charCode >= 0 && charCode <= 255) return String.fromCharCode(charCode);
                       console.warn(`Fallback: Could not decode hex escape \\x${hex}.`);
                      return m; // Return original escape sequence if invalid
                 })
                 .replace(/\\u\{([0-9a-fA-F]+)\}/g, (m, unicode) => {
                      const charCode = parseInt(unicode,16);
                      if (!isNaN(charCode)) return String.fromCharCode(charCode); // Allow higher for unicode
                      console.warn(`Fallback: Could not decode unicode escape \\u{${unicode}}.`);
                      return m; // Return original escape sequence if invalid
                 });


                 console.warn("Fallback: –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ loadstring. –î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ–π.");
                 // –ï—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –∏–∑–≤–ª–µ–∫–ª–∏, —Å—á–∏—Ç–∞–µ–º "—á–∞—Å—Ç–∏—á–Ω–æ" –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º,
                 // —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å".
                 if (output !== "" || m[1].trim() === "") { // Consider empty source string as a valid outcome for fallback
                     deobfuscated = true;
                 } else {
                     // If regex matched but resulted in empty output and source wasn't empty, something went wrong.
                     output = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫—É.";
                     outputElement.style.borderColor = "#ff9800";
                 }

             }
              // If regex didn't match loadstring("..."), then it's truly unrecognized by simple means.
         }


         // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
         if (!deobfuscated) {
              // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–∫–ª—é—á–∞—è fallback
              output = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.";
              outputElement.style.borderColor = "#ff9800"; // –¶–≤–µ—Ç –æ—à–∏–±–∫–∏
         } else if (output === "" && input !== "") {
             // –ï—Å–ª–∏ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (deobfuscated=true), –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π,
             // –ò –∏—Å—Ö–æ–¥–Ω—ã–π –≤–≤–æ–¥ –Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º.
             output = "–ö–æ–¥ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª –ø—É—Å—Ç–æ–π –∫–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö).";
             outputElement.style.borderColor = "#ff9800"; // –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
         } else if (output !== "" && !output.startsWith('–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏') && !output.startsWith('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å')) {
              // –£—Å–ø–µ—à–Ω–∞—è –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è —Å –Ω–µ–ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
              outputElement.style.borderColor = "#4CAF50"; // –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞
         }
         // –ï—Å–ª–∏ output —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ –∏–∑ –±–ª–æ–∫–∞ try/catch, –µ–≥–æ —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.


    } catch (e) {
         // –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
         console.error("Deobfuscation error:", e);
         output = `–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: ${e.message}`;
         outputElement.style.borderColor = "#ff9800"; // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
         // –í–∞–∂–Ω–æ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å deobfuscated = true –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –Ω–µ —Å–∫—Ä—ã–ª–∞—Å—å –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    }

     // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    outputElement.textContent = output;

}

// --- Copy to Clipboard ---
 function copyToClipboard() {
    const output = document.getElementById("output");
    const text = output.textContent;

    // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
     const excludedTexts = ['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è...', '–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.', '–û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç'];
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
     if (!text || excludedTexts.some(prefix => text.startsWith(prefix))) {
         alert("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.");
         return;
     }


    navigator.clipboard.writeText(text).then(() => {
         const btn = document.querySelector(".copy-btn");
         const originalText = btn.textContent;
         btn.textContent = "–°–ö–û–ü–ò–†–û–í–ê–ù–û!";
         btn.classList.add("copied");
         setTimeout(() => {
             btn.textContent = originalText;
             btn.classList.remove("copied");
         }, 1500);
    }).catch(err => {
         console.error("Copy error: ", err);
         // Fallback method for older browsers or specific environments
         try {
              const ta = document.createElement("textarea");
              ta.value = text;
              // Make it invisible and outside the viewport
              ta.style.position = "fixed";
              ta.style.opacity = "0";
              ta.style.left = "-9999px";
              ta.style.top = "-9999px";
              document.body.appendChild(ta);
              ta.select();
              const ok = document.execCommand("copy");
              document.body.removeChild(ta);
              const btn = document.querySelector(".copy-btn");
              const originalText = btn.textContent;
              if (ok) {
                  btn.textContent = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!";
                  btn.classList.add("copied");
              } else {
                   btn.textContent = "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (fallback)";
              }
              setTimeout(() => {
                  btn.textContent = originalText;
                  btn.classList.remove("copied");
              }, 2000); // Give a bit more time for fallback message
         } catch (e) {
              console.error("Fallback copy failed: ", e);
              alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.");
         }
    });
 }

// --- Auto-select on click ---
document.getElementById("output").addEventListener("click", function(event) {
     // –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    const excludedTexts = ['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è...', '–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.', '–û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç'];
    if (!this.textContent || excludedTexts.some(prefix => this.textContent.startsWith(prefix))) {
         // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º, –Ω–µ –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
         return;
     }
     // Prevent re-selecting if already selected (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
     // if (window.getSelection().toString() === this.textContent) {
     //     return;
     // }
    try {
                 const range = document.createRange();
                 range.selectNodeContents(this); // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                 const selection = window.getSelection();
                 selection.removeAllRanges(); // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                 selection.addRange(range); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            } catch (e) {
                 console.warn("Could not select text.", e);
            }
        });

         // –£–¥–∞–ª–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å DOMContentLoaded, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä

