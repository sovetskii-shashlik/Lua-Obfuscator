// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
const themeToggle = document.getElementById('themeToggle');
themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const isDark = document.body.classList.contains('dark-theme');
    themeToggle.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–µ–º—ã –≤ localStorage
    localStorage.setItem('darkTheme', isDark);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (localStorage.getItem('darkTheme') === 'true') {
    document.body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
}

// –í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
function obfuscate(method, inputText) {
    const input = inputText || document.getElementById("input").value.trim();
    if (!input) {
        alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        return "";
    }

    let output = "";
    
    // 1. ASCII –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (\104\101\108\108\111)
    if (method === "ascii") {
        let escaped = "";
        for (let i = 0; i < input.length; i++) {
            escaped += "\\" + input.charCodeAt(i);
        }
        output = `loadstring("${escaped}")()`;
    }
    
    // 2. HEX –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (\x68\x65\x6c\x6c\x6f)
    else if (method === "hex") {
        let hexStr = "";
        for (let i = 0; i < input.length; i++) {
            hexStr += "\\x" + input.charCodeAt(i).toString(16).padStart(2, "0");
        }
        output = `loadstring("${hexStr}")()`;
    }
    
    // 3. Unicode –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (\u{0068}\u{0065}\u{006c}\u{006c}\u{006f})
    else if (method === "unicode") {
        let unicodeStr = "";
        for (let i = 0; i < input.length; i++) {
            unicodeStr += "\\u{" + input.charCodeAt(i).toString(16).padStart(4, "0") + "}";
        }
        output = `loadstring("${unicodeStr}")()`;
    }
    
    // 4. –ß–∏—Å–ª–æ–≤–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (string.char(104,101,108,108,111))
    else if (method === "number") {
        let numbers = [];
        for (let i = 0; i < input.length; i++) {
            numbers.push(input.charCodeAt(i));
        }
        output = `loadstring(string.char(${numbers.join(",")}))()`;
    }
    
    // 5. –¢—Ä–æ–∏—á–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (ternary)
    else if (method === "ternary") {
        let ternaryParts = [];
        for (let i = 0; i < input.length; i++) {
            ternaryParts.push(input.charCodeAt(i).toString(3).padStart(6, '0'));
        }
        output = `loadstring((function() local s="" for t in ("${ternaryParts.join('')}"):gmatch("%d%d%d%d%d%d") do s=s..string.char(tonumber(t,3)) end return s end)())()`;
    }
    
    // 6. –ë–∏–Ω–∞—Ä–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (01101000 01100101...)
    else if (method === "binary") {
        let binaryStr = "";
        for (let i = 0; i < input.length; i++) {
            binaryStr += input.charCodeAt(i).toString(2).padStart(8, '0');
        }
        output = `loadstring((function() local s="" for b in ("${binaryStr}"):gmatch("%d%d%d%d%d%d%d%d") do s=s..string.char(tonumber(b,2)) end return s end)())()`;
    }
    
    // 7. –ß–µ—Ä–µ—Å–ø–æ–ª–æ—Å–∏—Ü–∞ (–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤)
    else if (method === "interleave") {
        let parts = [[], []];
        for (let i = 0; i < input.length; i++) {
            parts[i%2].push(input.charCodeAt(i));
        }
        output = `loadstring((function(a,b)local s=''for i=1,math.max(#a,#b)do if a[i]then s=s..string.char(a[i])end if b[i]then s=s..string.char(b[i])end end return s end)({${parts[0].join(',')}},{${parts[1].join(',')}}))()`;
    }

    // 8. –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ (—É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞)
    else if (method === "prime") {
        const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];
        let transformed = [];
        for (let i = 0; i < input.length; i++) {
            const prime = primes[i % primes.length];
            transformed.push(input.charCodeAt(i) * prime);
            transformed.push(prime);
        }
        output = `loadstring((function(t)local s=''for i=1,#t,2 do s=s..string.char(t[i]//t[i+1])end return s end)({${transformed.join(',')}}))()`;
    }

    // 9. –°–º–µ—â–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã)
    else if (method === "offset") {
        const offset = 5;
        let transformed = [];
        for (let i = 0; i < input.length; i++) {
            transformed.push(input.charCodeAt(i) + offset);
        }
        output = `loadstring(string.char(${transformed.join(',')}):gsub('.',function(c)return string.char(c:byte()-${offset})end))()`;
    }
    
    if (!inputText) {
        document.getElementById("output").textContent = output;
    }
    return output;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è 1)
function startMultiLayerObfuscation() {
    const input = document.getElementById("input").value.trim();
    if (!input) {
        alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        return;
    }

    const btn = document.getElementById("multiObfuscateBtn");
    const status = document.getElementById("status");
    btn.disabled = true;
    btn.classList.add("processing");
    btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v1...";

    let currentCode = input;
    const steps = [
        { method: "offset", name: "–°–º–µ—â–µ–Ω–∏–µ (+5)" },
        { method: "unicode", name: "Unicode" },
        { method: "ternary", name: "–¢—Ä–æ–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" }
    ];

    let step = 0;
    
    function processNextStep() {
        if (step >= steps.length) {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            btn.disabled = false;
            btn.classList.remove("processing");
            btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v1";
            status.textContent = "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è v1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
            return;
        }

        const currentMethod = steps[step];
        status.textContent = `–®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ textarea
        document.getElementById("input").value = currentCode;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é
        currentCode = obfuscate(currentMethod.method, currentCode);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ output
        document.getElementById("output").textContent = currentCode;
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º (1 —Å–µ–∫—É–Ω–¥–∞)
        step++;
        setTimeout(processNextStep, 1000);
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    processNextStep();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è 2)
function startMultiLayerObfuscationV2() {
    const input = document.getElementById("input").value.trim();
    if (!input) {
        alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        return;
    }

    const btn = document.getElementById("multiObfuscateBtnV2");
    const status = document.getElementById("statusV2");
    btn.disabled = true;
    btn.classList.add("processing");
    btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v2...";

    let currentCode = input;
    const steps = [
        { method: "prime", name: "–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ" },
        { method: "hex", name: "HEX" },
        { method: "unicode", name: "Unicode" },
        { method: "ternary", name: "–¢—Ä–æ–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" }
    ];

    let step = 0;
    
    function processNextStep() {
        if (step >= steps.length) {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            btn.disabled = false;
            btn.classList.remove("processing");
            btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v2";
            status.textContent = "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
            return;
        }

        const currentMethod = steps[step];
        status.textContent = `–®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ textarea
        document.getElementById("input").value = currentCode;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é
        currentCode = obfuscate(currentMethod.method, currentCode);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ output
        document.getElementById("output").textContent = currentCode;
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º (1 —Å–µ–∫—É–Ω–¥–∞)
        step++;
        setTimeout(processNextStep, 1000);
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    processNextStep();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è 3)
function startMultiLayerObfuscationV3() {
    const input = document.getElementById("input").value.trim();
    if (!input) {
        alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        return;
    }

    const btn = document.getElementById("multiObfuscateBtnV3");
    const status = document.getElementById("statusV3");
    btn.disabled = true;
    btn.classList.add("processing");
    btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v3...";

    let currentCode = input;
    const steps = [
        { method: "hex", name: "HEX" },
        { method: "ternary", name: "–¢—Ä–æ–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" },
        { method: "unicode", name: "Unicode" },
        { method: "binary", name: "–ë–∏–Ω–∞—Ä–Ω—ã–π" }
    ];

    let step = 0;
    
    function processNextStep() {
        if (step >= steps.length) {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            btn.disabled = false;
            btn.classList.remove("processing");
            btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v3";
            status.textContent = "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è v3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
            return;
        }

        const currentMethod = steps[step];
        status.textContent = `–®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ textarea
        document.getElementById("input").value = currentCode;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é
        currentCode = obfuscate(currentMethod.method, currentCode);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ output
        document.getElementById("output").textContent = currentCode;
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º (1 —Å–µ–∫—É–Ω–¥–∞)
        step++;
        setTimeout(processNextStep, 1000);
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    processNextStep();
}

// –§—É–Ω–∫—Ü–∏—è –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
function deobfuscate() {
    const input = document.getElementById("input").value.trim();
    if (!input) {
        alert("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        return;
    }

    let output = "";
    
    try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
        if (input.includes("\\x") && input.includes("loadstring")) {
            // HEX –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
            const hexMatches = input.match(/\\x([0-9a-fA-F]{2})/g);
            if (hexMatches) {
                hexMatches.forEach(match => {
                    const hex = match.substring(2);
                    output += String.fromCharCode(parseInt(hex, 16));
                });
            }
        } 
        else if (input.includes("\\u{") && input.includes("loadstring")) {
            // Unicode –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
            const uniMatches = input.match(/\\u\{([0-9a-fA-F]+)\}/g);
            if (uniMatches) {
                uniMatches.forEach(match => {
                    const code = match.substring(3, match.length - 1);
                    output += String.fromCharCode(parseInt(code, 16));
                });
            }
        }
        else if (input.includes("\\") && /\\\d{3}/.test(input) && input.includes("loadstring")) {
            // ASCII –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
            const asciiMatches = input.match(/\\\d{1,3}/g);
            if (asciiMatches) {
                asciiMatches.forEach(match => {
                    output += String.fromCharCode(parseInt(match.substring(1)));
                });
            }
        }
        else if (input.includes("string.char(") && input.includes("loadstring")) {
            // –ß–∏—Å–ª–æ–≤–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
            const charCodeMatches = input.match(/string\.char\(([^)]+)\)/);
            if (charCodeMatches && charCodeMatches[1]) {
                const codes = charCodeMatches[1].split(',').map(Number);
                codes.forEach(code => {
                    output += String.fromCharCode(code);
                });
            }
        }
        else if (input.includes("tonumber(t,3)") && input.includes("loadstring")) {
            // –¢—Ä–æ–∏—á–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
            const ternaryMatch = input.match(/"([012]+)"/);
            if (ternaryMatch && ternaryMatch[1]) {
                const ternaryStr = ternaryMatch[1];
                for (let i = 0; i < ternaryStr.length; i += 6) {
                    const ternaryChunk = ternaryStr.substr(i, 6);
                    output += String.fromCharCode(parseInt(ternaryChunk, 3));
                }
            }
        }
        else if (input.includes("tonumber(b,2)") && input.includes("loadstring")) {
            // –ë–∏–Ω–∞—Ä–Ω–∞—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏—è
            const binaryMatch = input.match(/"([01]+)"/);
            if (binaryMatch && binaryMatch[1]) {
                const binaryStr = binaryMatch[1];
                for (let i = 0; i < binaryStr.length; i += 8) {
                    const binaryChunk = binaryStr.substr(i, 8);
                    output += String.fromCharCode(parseInt(binaryChunk, 2));
                }
            }
        }
        else if (input.includes("math.max(#a,#b)") && input.includes("loadstring")) {
            // –ß–µ—Ä–µ—Å–ø–æ–ª–æ—Å–∏—Ü–∞
            const array1Match = input.match(/\{([^}]+)\}/g);
            if (array1Match && array1Match.length >= 2) {
                const array1 = array1Match[0].slice(1, -1).split(',').map(Number);
                const array2 = array1Match[1].slice(1, -1).split(',').map(Number);
                for (let i = 0; i < Math.max(array1.length, array2.length); i++) {
                    if (array1[i]) output += String.fromCharCode(array1[i]);
                    if (array2[i]) output += String.fromCharCode(array2[i]);
                }
            }
        }
        else if (input.includes("t[i]//t[i+1]") && input.includes("loadstring")) {
            // –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
            const arrayMatch = input.match(/\{([^}]+)\}/);
            if (arrayMatch && arrayMatch[1]) {
                const numbers = arrayMatch[1].split(',').map(Number);
                for (let i = 0; i < numbers.length; i += 2) {
                    output += String.fromCharCode(numbers[i] / numbers[i+1]);
                }
            }
        }
        else if (input.includes(":gsub('.',function(c)") && input.includes("loadstring")) {
            // –°–º–µ—â–µ–Ω–∏–µ
            const offsetMatch = input.match(/string\.char\(([^)]+)\)/);
            const offsetValueMatch = input.match(/c:byte\(\)-(\d+)/);
            if (offsetMatch && offsetMatch[1] && offsetValueMatch && offsetValueMatch[1]) {
                const offset = parseInt(offsetValueMatch[1]);
                const codes = offsetMatch[1].split(',').map(Number);
                codes.forEach(code => {
                    output += String.fromCharCode(code - offset);
                });
            }
        }
        else {
            // –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫ Lua-–∫–æ–¥ (–æ–ø–∞—Å–Ω–æ!)
            try {
                // –≠—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º
                const fakeEval = new Function('return ' + input.replace(/loadstring/g, 'function(s) return s end'));
                output = fakeEval();
            } catch (e) {
                output = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: " + e.message;
            }
        }
    } catch (e) {
        output = "–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: " + e.message;
    }
    
    document.getElementById("output").textContent = output || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥";
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function copyToClipboard() {
    const output = document.getElementById("output");
    const text = output.textContent;
    
    if (!text) {
        alert("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥!");
        return;
    }

    navigator.clipboard.writeText(text)
        .then(() => {
            const btn = document.querySelector(".copy-btn");
            btn.textContent = "–°–ö–û–ü–ò–†–û–í–ê–ù–û!";
            btn.classList.add("copied");
            
            setTimeout(() => {
                btn.textContent = "–ö–û–ü–ò–†–û–í–ê–¢–¨";
                btn.classList.remove("copied");
            }, 2000);
        })
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ", err);
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textarea = document.createElement("textarea");
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand("copy");
            document.body.removeChild(textarea);
            
            const btn = document.querySelector(".copy-btn");
            btn.textContent = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)";
            setTimeout(() => {
                btn.textContent = "–ö–û–ü–ò–†–û–í–ê–¢–¨";
            }, 2000);
        });
}

// –ê–≤—Ç–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
document.getElementById("output").addEventListener("click", function() {
    const range = document.createRange();
    range.selectNode(this);
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(range);
});