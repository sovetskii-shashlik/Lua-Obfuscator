// === –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ script.js ===

// --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã ---
const themeToggle = document.getElementById('themeToggle');
const urlToggleBtn = document.getElementById('urlToggleBtn'); // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤

themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const isDark = document.body.classList.contains('dark-theme');
    themeToggle.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–µ–º—ã –≤ localStorage
    localStorage.setItem('darkTheme', isDark);
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (localStorage.getItem('darkTheme') === 'true') {
    document.body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è';
} else {
     themeToggle.textContent = 'üåô'; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –ø—Ä–∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
}

// --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ (–∫–æ–¥/URL) ---
const codeObfuscatorDiv = document.getElementById('codeObfuscator');
const urlObfuscatorDiv = document.getElementById('urlObfuscator');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –∫–æ–¥–∞ –≤–∏–¥–µ–Ω, URL —Å–∫—Ä—ã—Ç)
codeObfuscatorDiv.style.display = 'block';
urlObfuscatorDiv.style.display = 'none';
urlToggleBtn.textContent = 'üîó'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ (—É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç –Ω–∞ URL —Ä–µ–∂–∏–º)
urlToggleBtn.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä';


urlToggleBtn.addEventListener('click', () => {
     const isCodeViewVisible = codeObfuscatorDiv.style.display !== 'none';

     if (isCodeViewVisible) {
         codeObfuscatorDiv.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –∫–æ–¥–∞
         urlObfuscatorDiv.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä
         urlToggleBtn.textContent = 'üìÑ'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –∫–æ–¥–∞
         urlToggleBtn.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –∫–æ–¥–∞';
         // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ URL
         document.getElementById("status").textContent = '';
         document.getElementById("statusV2").textContent = '';
         document.getElementById("statusV3").textContent = '';
         document.getElementById("codeOutput").textContent = ''; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
         document.getElementById("input").value = '';
     } else {
         urlObfuscatorDiv.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä
         codeObfuscatorDiv.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –∫–æ–¥–∞
         urlToggleBtn.textContent = 'üîó'; // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
         urlToggleBtn.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä';
         // –û—á–∏—â–∞–µ–º –ø–æ–ª—è URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –∫–æ–¥
         document.getElementById("urlInput").value = ''; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
         document.getElementById("urlOutputContainer").innerHTML = ''; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
     }
});


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞ ---

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    let result = Math.floor(Math.random() * (max - min + 1)) + min;
    return result;
}

// --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±–∞–π—Ç–æ–≤ UTF-8) ---

function obfuscate(method, inputText) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–æ–¥ –∏–∑ —Å–µ–∫—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ *–∫–æ–¥–∞*
    const input = inputText || document.getElementById("input").value.trim();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—ã–≤–æ–¥–∞ –∏–∑ —Å–µ–∫—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ *–∫–æ–¥–∞* (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID)
    const outputElement = document.getElementById("codeOutput");

    if (!input && !inputText) {
        alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        outputElement.textContent = '';
        outputElement.style.borderColor = "#4CAF50";
        return "";
    }

    if (!inputText) { // –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –∏–∑ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
        outputElement.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...';
        outputElement.style.borderColor = "#4CAF50";
         // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
        document.getElementById("status").textContent = '';
        document.getElementById("statusV2").textContent = '';
        document.getElementById("statusV3").textContent = '';
    }

    let output = "";
    let bytes = new Uint8Array();
    try {
        const encoder = new TextEncoder();
        bytes = encoder.encode(input); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ UTF-8

        if (method === "ascii") {
            let e = "";
            for (const byte of bytes) {
                e += "\\" + byte; // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞ (0-255)
            }
            // Lua loadstring –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –±–∞–π—Ç–∞–º
            output = `loadstring("${e}")()`;
        } else if (method === "hex") {
            let h = "";
            for (const byte of bytes) {
                h += "\\x" + byte.toString(16).padStart(2, "0"); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–∞–π—Ç –∫–∞–∫ hex (00-FF)
            }
             // Lua loadstring –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç hex-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –±–∞–π—Ç–∞–º
            output = `loadstring("${h}")()`;
        } else if (method === "unicode") {
             // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–æ–¥–∏—Ä—É–µ—Ç –∫–æ–¥–æ–≤—ã–µ —Ç–æ—á–∫–∏ —Å—Ç—Ä–æ–∫ JS (\u{}).
             // –û–Ω –ù–ï –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –±–∞–π—Ç–∞—Ö –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Lua –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
             // –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –≤–Ω–µ –±–∞–∑–æ–≤–æ–π –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ
             // –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ Lua. –ë–∞–π—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
             let u = "";
             for (let i = 0; i < input.length; i++) {
                 // charCodeAt –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –≤–Ω–µ BMP.
                 // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–≤–µ—Ä–Ω–æ–º—É unicode-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤ Lua.
                 u += "\\u{" + input.charCodeAt(i).toString(16).padStart(4, "0") + "}";
             }
             output = `loadstring("${u}")()`;
        } else if (method === "number") {
            // –ü–µ—Ä–µ–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ (0-255) –Ω–∞–ø—Ä—è–º—É—é –≤ string.char –≤ Lua
            output = `loadstring(string.char(${Array.from(bytes).join(",")}))()`;
        } else if (method === "base3") {
            let b = "";
            for (const byte of bytes) {
                 // –î–æ–ø–æ–ª–Ω—è–µ–º base3 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ –¥–æ 6 —Ü–∏—Ñ—Ä (–º–∞–∫—Å 255 = 22110 –≤ base 3)
                b += byte.toString(3).padStart(6, '0');
            }
            // –§—É–Ω–∫—Ü–∏—è Lua –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç base3 —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É,
            // –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç string.char(unpack(bytes)) –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏.
            output = `loadstring((function() local s="" local data="${b}" local bytes = {} for i = 1, #data, 6 do table.insert(bytes, tonumber(data:sub(i, i+5), 3)) end return string.char(unpack(bytes)) end)())()`;
        } else if (method === "binary") {
            let b = "";
            for (const byte of bytes) {
                b += byte.toString(2).padStart(8, '0'); // –î–æ–ø–æ–ª–Ω—è–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ –¥–æ 8 —Ü–∏—Ñ—Ä
            }
             // –§—É–Ω–∫—Ü–∏—è Lua –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
            output = `loadstring((function() local s="" local data="${b}" local bytes = {} for i = 1, #data, 8 do table.insert(bytes, tonumber(data:sub(i, i+7), 2)) end return string.char(unpack(bytes)) end)())()`;
        } else if (method === "base4") {
             let b = "";
             for (const byte of bytes) {
                  // –î–æ–ø–æ–ª–Ω—è–µ–º base4 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ –¥–æ 4 —Ü–∏—Ñ—Ä (–º–∞–∫—Å 255 = 3333 –≤ base 4)
                 b += byte.toString(4).padStart(4, '0');
             }
             // –§—É–Ω–∫—Ü–∏—è Lua –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç base4 —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
             output = `loadstring((function() local s="" local data="${b}" local bytes = {} for i = 1, #data, 4 do table.insert(bytes, tonumber(data:sub(i, i+3), 4)) end return string.char(unpack(bytes)) end)())()`;
        } else if (method === "base5") {
             let b = "";
             for (const byte of bytes) {
                 // –î–æ–ø–æ–ª–Ω—è–µ–º base5 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ –¥–æ 4 —Ü–∏—Ñ—Ä (–º–∞–∫—Å 255 = 2010 –≤ base 5)
                 b += byte.toString(5).padStart(4, '0');
             }
             // –§—É–Ω–∫—Ü–∏—è Lua –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç base5 —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
             output = `loadstring((function() local s="" local data="${b}" local bytes = {} for i = 1, #data, 4 do table.insert(bytes, tonumber(data:sub(i, i+3), 5)) end return string.char(unpack(bytes)) end)())()`;
        } else if (method === "octal") { // Base 7
              let o = "";
              for (const byte of bytes) {
                   // –î–æ–ø–æ–ª–Ω—è–µ–º base7 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ –¥–æ 3 —Ü–∏—Ñ—Ä (–º–∞–∫—Å 255 = 513 –≤ base 7)
                  o += byte.toString(7).padStart(3, '0');
              }
              // –§—É–Ω–∫—Ü–∏—è Lua –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç base7 —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
              output = `loadstring((function() local s="" local data="${o}" local bytes = {} for i = 1, #data, 3 do table.insert(bytes, tonumber(data:sub(i, i+2), 7)) end return string.char(unpack(bytes)) end)())()`;
         } else if (method === "octal8") { // Base 8
              let o = "";
              for (const byte of bytes) {
                   // –î–æ–ø–æ–ª–Ω—è–µ–º base8 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –±–∞–π—Ç–∞ –¥–æ 3 —Ü–∏—Ñ—Ä (–º–∞–∫—Å 255 = 377 –≤ base 8)
                  o += byte.toString(8).padStart(3, '0');
              }
              // –§—É–Ω–∫—Ü–∏—è Lua –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç base8 —á–∞–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
              output = `loadstring((function() local s="" local data="${o}" local bytes = {} for i = 1, #data, 3 do table.insert(bytes, tonumber(data:sub(i, i+2), 8)) end return string.char(unpack(bytes)) end)())()`;
          } else if (method === "interleave") {
              let p1 = []; // –ë–∞–π—Ç—ã –Ω–∞ —á–µ—Ç–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞—Ö
              let p2 = []; // –ë–∞–π—Ç—ã –Ω–∞ –Ω–µ—á–µ—Ç–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞—Ö
              for (let i = 0; i < bytes.length; i++) {
                  if (i % 2 === 0) {
                      p1.push(bytes[i]);
                  } else {
                      p2.push(bytes[i]);
                  }
              }
              // –§—É–Ω–∫—Ü–∏—è Lua —á–µ—Ä–µ–¥—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ –∏–∑ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü, –ø–æ–º–µ—â–∞–µ—Ç –≤ –Ω–æ–≤—É—é, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
              output = `loadstring((function(a,b)local bytes={}local maxLen=math.max(#a,#b)for i=1,maxLen do if a[i]then table.insert(bytes,a[i])end if b[i]then table.insert(bytes,b[i])end end return string.char(unpack(bytes)) end)({${p1.join(',')}},{${p2.join(',')}}))()`;
          } else if (method === "prime") {
               const pr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]; // –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
               let t = []; // –ü–∞—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π (–±–∞–π—Ç * –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ)
               for (let i = 0; i < bytes.length; i++) {
                   const byte = bytes[i];
                   const prime = pr[i % pr.length];
                   t.push(byte * prime);
                   t.push(prime);
               }
               // –§—É–Ω–∫—Ü–∏—è Lua –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –ø–∞—Ä–∞–º, –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞ (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ), –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
               output = `loadstring((function(t)local bytes={}for i=1,#t,2 do table.insert(bytes, math.floor(t[i]/t[i+1]))end return string.char(unpack(bytes)) end)({${t.join(',')}}))()`;
           } else if (method === "offset") {
               const of = 5; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
               let t = []; // –°–º–µ—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
               for (const byte of bytes) {
                   t.push(byte + of);
               }
               // –§—É–Ω–∫—Ü–∏—è Lua –ø–æ–ª—É—á–∞–µ—Ç —Å–º–µ—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –≤—ã—á–∏—Ç–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
               output = `loadstring((function(codes, offset) local bytes = {}; for i = 1, #codes do table.insert(bytes, codes[i] - offset) end return string.char(unpack(bytes)) end)({${t.join(',')}}, ${of}))()`;
           } else if (method === "multiply") {
               const mu = 2; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
               let t = []; // –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
               for (const byte of bytes) {
                   t.push(byte * mu);
               }
               // –§—É–Ω–∫—Ü–∏—è Lua –ø–æ–ª—É—á–∞–µ—Ç —É–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
               output = `loadstring((function(codes, multiplier) local bytes = {}; for i = 1, #codes do table.insert(bytes, math.floor(codes[i] / multiplier)) end return string.char(unpack(bytes)) end)({${t.join(',')}}, ${mu}))()`;
           } else if (method === "random_offset") {
                const ov = getRandomInt(1000, 10000); // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                let t = []; // –°–º–µ—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
                for (const byte of bytes) {
                    t.push(byte + ov);
                }
                // –§—É–Ω–∫—Ü–∏—è Lua –ø–æ–ª—É—á–∞–µ—Ç —Å–º–µ—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –≤—ã—á–∏—Ç–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
                output = `loadstring((function(codes, offset) local bytes = {}; for i = 1, #codes do table.insert(bytes, codes[i] - offset) end return string.char(unpack(bytes)) end)({${t.join(',')}}, ${ov}))()`;
           } else if (method === "random_multiply") {
                let mv;
                do { mv = getRandomInt(1000, 10000); } while (mv === 0 || mv === 1); // –°–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–µ 0 –∏ –Ω–µ 1)
                let t = []; // –£–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
                for (const byte of bytes) {
                    t.push(byte * mv);
                }
                // –§—É–Ω–∫—Ü–∏—è Lua –ø–æ–ª—É—á–∞–µ—Ç —É–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –ø–æ–º–µ—â–∞–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç.
                output = `loadstring((function(codes, multiplier) local bytes = {}; for i = 1, #codes do table.insert(bytes, math.floor(codes[i] / multiplier)) end return string.char(unpack(bytes)) end)({${t.join(',')}}, ${mv}))()`;
           }
        else { console.warn("Unknown method:", method); output = `--[[ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${method} ]]`; }

    } catch (error) {
         console.error(`Error during ${method} obfuscation:`, error);
         output = `--[[ –û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (${method}): ${error.message} ]]`;
         if (!inputText) {
            outputElement.textContent = output;
            outputElement.style.borderColor = "#ff9800";
         }
         return "";
    }

     if (!inputText) { // –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –∏–∑ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
        outputElement.textContent = output;
        outputElement.style.borderColor = "#4CAF50";
    }
    return output;
}

// --- –§—É–Ω–∫—Ü–∏–∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–ò—Å–ø–æ–ª—å–∑—É—é—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é obfuscate) ---
function startMultiLayerObfuscation() {
    const input = document.getElementById("input").value.trim();
    const outputElement = document.getElementById("codeOutput"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
    if (!input) { alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!"); return; }
    outputElement.textContent = '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ v1...'; outputElement.style.borderColor = "#4CAF50";
    const btn = document.getElementById("multiObfuscateBtn"); const status = document.getElementById("status");
    document.getElementById("statusV2").textContent = ''; document.getElementById("statusV3").textContent = '';
    btn.disabled = true; btn.classList.add("processing"); btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v1..."; status.textContent = "–ó–∞–ø—É—Å–∫ v1...";
    const steps = [ { method: "random_offset", name: "–°–º–µ—â–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "hex", name: "HEX" }, { method: "base3", name: "Base3" } ]; let currentCode = input; let step = 0;
    function processNextStep() {
        if (step >= steps.length) { btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v1"; status.textContent = "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; return; }
        const currentMethod = steps[step]; status.textContent = `v1 –®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`; const obfuscatedStep = obfuscate(currentMethod.method, currentCode);
        if (obfuscatedStep === "" || obfuscatedStep.startsWith('--[[')) {
            status.textContent = `v1 –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step + 1}. –ü—Ä–µ—Ä–≤–∞–Ω–æ.`; btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v1"; outputElement.style.borderColor = "#ff9800"; return;
        }
        currentCode = obfuscatedStep; outputElement.textContent = currentCode; outputElement.style.borderColor = "#4CAF50"; step++; setTimeout(processNextStep, 500);
    } processNextStep();
}
function startMultiLayerObfuscationV2() {
     const input = document.getElementById("input").value.trim();
     const outputElement = document.getElementById("codeOutput"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
     if (!input) { alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!"); return; }
     outputElement.textContent = '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ v2...'; outputElement.style.borderColor = "#4CAF50";
     const btn = document.getElementById("multiObfuscateBtnV2"); const status = document.getElementById("statusV2");
     document.getElementById("status").textContent = ''; document.getElementById("statusV3").textContent = '';
     btn.disabled = true; btn.classList.add("processing"); btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v2..."; status.textContent = "–ó–∞–ø—É—Å–∫ v2...";
     const steps = [ { method: "prime", name: "–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ" }, { method: "hex", name: "HEX" }, { method: "random_multiply", name: "–£–º–Ω–æ–∂–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "base4", name: "Base4" } ]; let currentCode = input; let step = 0;
     function processNextStep() {
         if (step >= steps.length) { btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v2"; status.textContent = "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; return; }
         const currentMethod = steps[step]; status.textContent = `v2 –®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`; const obfuscatedStep = obfuscate(currentMethod.method, currentCode);
         if (obfuscatedStep === "" || obfuscatedStep.startsWith('--[[')) {
            status.textContent = `v2 –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step + 1}. –ü—Ä–µ—Ä–≤–∞–Ω–æ.`; btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v2"; outputElement.style.borderColor = "#ff9800"; return;
         }
         currentCode = obfuscatedStep; outputElement.textContent = currentCode; outputElement.style.borderColor = "#4CAF50"; step++; setTimeout(processNextStep, 500);
     } processNextStep();
}
function startMultiLayerObfuscationV3() {
     const input = document.getElementById("input").value.trim();
     const outputElement = document.getElementById("codeOutput"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
     if (!input) { alert("–í–≤–µ–¥–∏ Lua-–∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!"); return; }
     outputElement.textContent = '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ v3...'; outputElement.style.borderColor = "#4CAF50";
     const btn = document.getElementById("multiObfuscateBtnV3"); const status = document.getElementById("statusV3");
     document.getElementById("status").textContent = ''; document.getElementById("statusV2").textContent = '';
     btn.disabled = true; btn.classList.add("processing"); btn.textContent = "–û–ë–§–£–°–ö–ê–¶–ò–Ø v3..."; status.textContent = "–ó–∞–ø—É—Å–∫ v3...";
     const steps = [ { method: "random_offset", name: "–°–º–µ—â–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "hex", name: "HEX" }, { method: "base5", name: "Base5" }, { method: "random_multiply", name: "–£–º–Ω–æ–∂–µ–Ω–∏–µ (–†–∞–Ω–¥–æ–º)" }, { method: "binary", name: "Binary" } ]; let currentCode = input; let step = 0;
     function processNextStep() {
         if (step >= steps.length) { btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v3"; status.textContent = "–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; return; }
         const currentMethod = steps[step]; status.textContent = `v3 –®–∞–≥ ${step + 1}/${steps.length}: ${currentMethod.name}`; const obfuscatedStep = obfuscate(currentMethod.method, currentCode);
         if (obfuscatedStep === "" || obfuscatedStep.startsWith('--[[')) {
            status.textContent = `v3 –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ ${step + 1}. –ü—Ä–µ—Ä–≤–∞–Ω–æ.`; btn.disabled = false; btn.classList.remove("processing"); btn.textContent = "–ú–ù–û–ì–û–°–õ–û–ô–ù–ê–Ø –û–ë–§–£–°–ö–ê–¶–ò–Ø v3"; outputElement.style.borderColor = "#ff9800"; return;
         }
         currentCode = obfuscatedStep; outputElement.textContent = currentCode; outputElement.style.borderColor = "#4CAF50"; step++; setTimeout(processNextStep, 500);
     } processNextStep();
}


// --- –§—É–Ω–∫—Ü–∏—è –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–∞–π—Ç–æ–≤ UTF-8) ---

function deobfuscate() {
    const input = document.getElementById("input").value.trim();
    const outputElement = document.getElementById("codeOutput"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID

    document.getElementById("status").textContent = '';
    document.getElementById("statusV2").textContent = '';
    document.getElementById("statusV3").textContent = '';

    if (!input) {
        alert("–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!");
        outputElement.textContent = '';
        outputElement.style.borderColor = "#4CAF50";
        return;
    }

    outputElement.textContent = '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è...';
    outputElement.style.borderColor = "#2196F3";

    let output = "";
    let deobfuscated = false;
    let byteValues = null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º null –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ, —Å—Ç–∞–Ω–µ—Ç –º–∞—Å—Å–∏–≤–æ–º –±–∞–π—Ç–æ–≤ (0-255) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

    try {
         // --- –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ ---

         // –®–∞–±–ª–æ–Ω 1: Number (loadstring(string.char(b1, b2, ...))())
         if (!deobfuscated) {
              const m = input.match(/loadstring\s*\(\s*string\.char\(([\d,\s]*)\)\)\(\)/s);
              if(m && m[1] !== undefined){
                  const s=m[1].trim();
                  const codes = (s==='')?[]:s.split(',').map(x=>Number(x.trim())).filter(n => !isNaN(n));
                  let tempByteValues = [];
                  let isValid = true;
                  codes.forEach(cd => {
                      if(cd >= 0 && cd <= 255) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±–∞–π—Ç–∞
                           tempByteValues.push(cd);
                      } else {
                           console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è string.char: –ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–π—Ç (${cd}).`);
                           isValid = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ, –µ—Å–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–∞–π—Ç–∞
                      }
                  });
                  if (isValid) { byteValues = tempByteValues; deobfuscated = true; } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º byteValues —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –±–∞–π—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
              }
         }

         // –®–∞–±–ª–æ–Ω 2: BaseN (loadstring((function() ... local data="..." ... tonumber(data:sub(...), base) ... string.char(unpack(bytes)) end)())())
         const baseMethods = [
             {b:3, len: 6}, // 6 —Ü–∏—Ñ—Ä –¥–ª—è base 3 (0-255)
             {b:2, len: 8}, // 8 —Ü–∏—Ñ—Ä –¥–ª—è base 2 (0-255)
             {b:4, len: 4}, // 4 —Ü–∏—Ñ—Ä—ã –¥–ª—è base 4 (0-255)
             {b:5, len: 4}, // 4 —Ü–∏—Ñ—Ä—ã –¥–ª—è base 5 (0-255)
             {b:7, len: 3}, // 3 —Ü–∏—Ñ—Ä—ã –¥–ª—è base 7 (0-255)
             {b:8, len: 3}  // 3 —Ü–∏—Ñ—Ä—ã –¥–ª—è base 8 (0-255)
         ];
         for (const bm of baseMethods) {
              if (!deobfuscated) {
                   // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ BaseN (–∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö)
                   const basePattern = new RegExp(`loadstring\\s*\\(\\s*\\(function\\(\\).*?local data=["']([0-9]+)["'].*?tonumber\\(data:sub\\(i,\\s*i\\+${bm.len-1}\\),\\s*${bm.b}\\).*?string\\.char\\(unpack\\(bytes\\)\\).*?end\\)\\(\\)\\)`, 's');
                   const baseMatch = input.match(basePattern);

                   if (baseMatch && baseMatch[1] !== undefined) {
                       const baseStr = baseMatch[1]; // –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ Base
                       if (baseStr.length % bm.len === 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–∞—Ç–Ω–∞ –¥–ª–∏–Ω–µ —á–∞–Ω–∫–∞
                           let tempByteValues = [];
                           let isValid = true;
                           for (let i = 0; i < baseStr.length; i += bm.len) {
                               const chunk = baseStr.substr(i, bm.len);
                               const byteValue = parseInt(chunk, bm.b); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —á–∞–Ω–∫ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞
                                if (!isNaN(byteValue) && byteValue >= 0 && byteValue <= 255) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –±–∞–π—Ç–æ–º
                                    tempByteValues.push(byteValue);
                                } else {
                                     console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è Base${bm.b}: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –≤–Ω–µ–¥–∏–∞–ø–∞–∑–æ–Ω–Ω—ã–π –±–∞–π—Ç (${byteValue}) –∏–∑ —á–∞–Ω–∫–∞ "${chunk}".`);
                                     isValid = false;
                                     break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –±–∞–π—Ç
                                }
                           }
                           if (isValid) { byteValues = tempByteValues; deobfuscated = true; } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º byteValues —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –±–∞–π—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
                       }
                   }
              }
         }

         // –®–∞–±–ª–æ–Ω 3: Interleave (loadstring((function(a,b)...string.char(unpack(bytes)) end)({p1},{p2}))())
         if (!deobfuscated) {
              const interleavePattern = /loadstring\s*\(\s*\(function\(a,b\).*?local bytes={}.*?table\.insert\(bytes,a\[i]\).*?table\.insert\(bytes,b\[i]\).*?return string\.char\(unpack\(bytes\)\) end\)\(\s*\{([\d,\s]*)\}\s*,\s*\{([\d,\s]*)\}\s*\)\)\(\)/s;
              const interleaveMatch = input.match(interleavePattern);
              if (interleaveMatch && interleaveMatch[1] !== undefined && interleaveMatch[2] !== undefined) {
                   const s1 = interleaveMatch[1].trim();
                   const s2 = interleaveMatch[2].trim();
                   // –ü–∞—Ä—Å–∏–º –º–∞—Å—Å–∏–≤—ã, —Ñ–∏–ª—å—Ç—Ä—É—è –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
                   const a1 = (s1 === '') ? [] : s1.split(',').map(x => Number(x.trim())).filter(n => !isNaN(n) && n >= 0 && n <= 255);
                   const a2 = (s2 === '') ? [] : s2.split(',').map(x => Number(x.trim())).filter(n => !isNaN(n) && n >= 0 && n <= 255);

                   let tempByteValues = [];
                   for (let i = 0; i < Math.max(a1.length, a2.length); i++) {
                       if (i < a1.length) tempByteValues.push(a1[i]);
                       if (i < a2.length) tempByteValues.push(a2[i]);
                   }
                   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤–∞–ª–∏–¥–Ω—ã–µ –±–∞–π—Ç—ã (—Ñ–∏–ª—å—Ç—Ä —É–∂–µ –±—ã–ª, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                   if (tempByteValues.every(byte => byte >= 0 && byte <= 255)) {
                        byteValues = tempByteValues;
                        deobfuscated = true;
                   } else {
                       console.warn("–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è Interleave: –ò–∑–≤–ª–µ—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –±–∞–π—Ç—ã.");
                   }
              }
         }

         // –®–∞–±–ª–æ–Ω 4: Prime (loadstring((function(t)...math.floor(t[i]/t[i+1])...string.char(unpack(bytes)) end)({pairs}))())
         if (!deobfuscated) {
              const primePattern = /loadstring\s*\(\s*\(function\(t\).*?local bytes={}.*?table\.insert\(bytes,\s*math\.floor\(t\[i\]\/\/\s*t\[i\+1\]\)\).*?return string\.char\(unpack\(bytes\)\) end\)\(\s*\{([\d,\s]*)\}\s*\)\)\(\)/s;
              const primeMatch = input.match(primePattern);
              if (primeMatch && primeMatch[1] !== undefined) {
                   const s = primeMatch[1].trim();
                   if (s === '') { byteValues = []; deobfuscated = true; } else {
                      const n = s.split(',').map(x => Number(x.trim())).filter(v => !isNaN(v));
                      if (n.length % 2 !== 0) throw new Error("–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ù–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.");
                      let tempByteValues = [];
                      let isValid = true;
                      for (let i = 0; i < n.length; i += 2) {
                          const v = n[i];
                          const p = n[i + 1];
                          if (!isNaN(v) && !isNaN(p) && p !== 0) {
                              const byteValue = Math.floor(v / p); // –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
                              if (byteValue >= 0 && byteValue <= 255) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –≤–∞–ª–∏–¥–Ω—ã–π –±–∞–π—Ç
                                  tempByteValues.push(byteValue);
                              } else {
                                   console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ü–æ–ª—É—á–µ–Ω –±–∞–π—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-255 (${byteValue}).`);
                                   isValid = false;
                                   break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –±–∞–π—Ç
                              }
                          } else {
                               throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ: –ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞ (${v}, ${p}).`);
                          }
                      }
                       if (isValid) { byteValues = tempByteValues; deobfuscated = true; } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º byteValues —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –±–∞–π—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
                   }
              }
         }

         // –®–∞–±–ª–æ–Ω 5: Offset/Multiply/Random Offset/Random Multiply (–§—É–Ω–∫—Ü–∏—è —Å codes, value –∏ unpack(bytes))
         // loadstring((function(codes, val) local bytes = {}; for ... bytes.push(codes[i] OP val); return string.char(unpack(bytes)) end)({codes}, val))()
          if (!deobfuscated) {
              // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –æ–ø–µ—Ä–∞—Ü–∏–∏ ([-/]) –∏ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ü–∏—Ñ—Ä—ã)
              const mathOpPattern = /loadstring\s*\(\s*\(function\(codes,\s*(\w+)\)\s*local bytes = {};\s*for i = 1, #codes do\s*table\.insert\(bytes,\s*codes\[i\]\s*([+\-*/%])\s*\1\)\s*end\s*return string\.char\(unpack\(bytes\)\)\s*end\)\(\s*\{([\d,\s]*)\}\s*,\s*(\d+)\s*\)\)\(\)/s;
              const mathOpMatch = input.match(mathOpPattern);

              if (mathOpMatch) {
                  const operation = mathOpMatch[2]; // –ù–∞–ø—Ä–∏–º–µ—Ä, "-", "/"
                  const codesStr = mathOpMatch[3].trim(); // –°—Ç—Ä–æ–∫–∞ —Å –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏
                  const value = parseInt(mathOpMatch[4]); // –ó–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –∏–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è

                  const initialCodes = (codesStr === '') ? [] : codesStr.split(',').map(s => Number(s.trim())).filter(n => !isNaN(n));

                   let tempByteValues = [];
                   let isValid = true;

                   if (!isNaN(value)) {
                       for (let i = 1; i <= initialCodes.length; ++i) { // –ú–∞—Å—Å–∏–≤—ã –≤ Lua –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è —Å 1
                           let code = initialCodes[i-1]; // –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –ø–æ 0-–∏–Ω–¥–µ–∫—Å–∞–º JS –º–∞—Å—Å–∏–≤–∞
                           let byteValue = NaN;

                           if (operation === "-") { // Offset –∏–ª–∏ Random Offset (–≤ Lua –±—ã–ª –±–∞–π—Ç + —Å–º–µ—â–µ–Ω–∏–µ, JS –æ—Ç–º–µ–Ω—è–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ)
                                byteValue = code - value;
                           } else if (operation === "/") { // Multiply –∏–ª–∏ Random Multiply (–≤ Lua –±—ã–ª –±–∞–π—Ç * –º–Ω–æ–∂–∏—Ç–µ–ª—å, JS –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–ª–µ–Ω–∏–µ)
                                if (value !== 0) byteValue = Math.floor(code / value); // –ò—Å–ø–æ–ª—å–∑—É–µ–º floor, —Ç.–∫. –≤ Lua –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è //
                                else { isValid = false; throw new Error("–î–µ–ª–∏—Ç–µ–ª—å 0 –ø—Ä–∏ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–£–º–Ω–æ–∂–µ–Ω–∏–µ/–°–º–µ—â–µ–Ω–∏–µ)."); }
                           } else {
                                // –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ - –∏–ª–∏ /, —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
                                console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (–ú–∞—Ç. –æ–ø–µ—Ä–∞—Ü–∏—è): –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è "${operation}".`);
                                isValid = false;
                                break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                           }

                           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞
                            if (!isNaN(byteValue) && byteValue >= 0 && byteValue <= 255) {
                                 tempByteValues.push(byteValue);
                            } else {
                                 console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (–ú–∞—Ç. –æ–ø–µ—Ä–∞—Ü–∏—è): –ü–æ–ª—É—á–µ–Ω –±–∞–π—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0-255 (${byteValue}) –∏–∑ –∫–æ–¥–∞ ${code} –∏ –∑–Ω–∞—á–µ–Ω–∏—è ${value}.`);
                                 isValid = false;
                                 break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                            }
                       }
                   } else {
                        console.warn("–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (–ú–∞—Ç. –æ–ø–µ—Ä–∞—Ü–∏—è): –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.");
                        isValid = false;
                   }

                   if (isValid) { byteValues = tempByteValues; deobfuscated = true; } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º byteValues —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –±–∞–π—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
              }
          }


         // –®–∞–±–ª–æ–Ω 6: ASCII (loadstring("\d\d\d...\d\d\d")()) - –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –±–∞–π—Ç–æ–≤
         if (!deobfuscated) {
              const m = input.match(/loadstring\s*\(\s*["']((?:\\\d{1,3})+)"'\s*\)\(\)/s); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
              if (m && m[1]) {
                 const escapedString = m[1]; // –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                 let tempByteValues = [];
                 let i = 0;
                 let isValid = true;
                 while (i < escapedString.length) {
                     if (escapedString[i] === '\\' && i + 1 < escapedString.length) {
                         const digitMatch = escapedString.substring(i + 1).match(/^\d{1,3}/); // –ò—â–µ–º 1-3 —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ '\'
                         if (digitMatch) {
                             const byteValue = parseInt(digitMatch[0], 10); // –ü–∞—Ä—Å–∏–º –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞
                             if (!isNaN(byteValue) && byteValue >= 0 && byteValue <= 255) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤–∞–ª–∏–¥–Ω—ã–π –±–∞–π—Ç
                                 tempByteValues.push(byteValue);
                                 i += 1 + digitMatch[0].length; // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∑–∞ '\' –∏ —Ü–∏—Ñ—Ä—ã
                                 continue; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                             }
                         }
                     }
                     // –ï—Å–ª–∏ –º—ã —Å—é–¥–∞ –¥–æ—à–ª–∏, —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ–µ \ddd —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à
                     console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è ASCII: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: "${escapedString.substring(i, i+5)}..."`);
                     isValid = false; break; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                 }

                 if (isValid) { byteValues = tempByteValues; deobfuscated = true; } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º byteValues —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –±–∞–π—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
              }
         }

         // –®–∞–±–ª–æ–Ω 7: HEX (loadstring("\xHH...\xHH")()) - –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –±–∞–π—Ç–æ–≤
         if (!deobfuscated) {
              const m = input.match(/loadstring\s*\(\s*["']((?:\\x[0-9a-fA-F]{2})+)["']\s*\)\(\)/s); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
              if (m && m[1]) {
                  const escapedString = m[1]; // –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                  let tempByteValues = [];
                  let i = 0;
                  let isValid = true;
                  while (i < escapedString.length) {
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ \x –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É—é—Ç –¥–≤–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
                      if (escapedString[i] === '\\' && escapedString[i+1] === 'x' && i + 3 < escapedString.length) {
                           const hex = escapedString.substring(i + 2, i + 4);
                           if (/^[0-9a-fA-F]{2}$/.test(hex)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–≤–µ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
                                const byteValue = parseInt(hex, 16); // –ü–∞—Ä—Å–∏–º –∫–∞–∫ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞
                                if (!isNaN(byteValue) && byteValue >= 0 && byteValue <= 255) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤–∞–ª–∏–¥–Ω—ã–π –±–∞–π—Ç
                                     tempByteValues.push(byteValue);
                                     i += 4; // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∑–∞ \xHH
                                     continue;
                                }
                           }
                      }
                      // –ï—Å–ª–∏ –º—ã —Å—é–¥–∞ –¥–æ—à–ª–∏, —ç—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ–µ \xHH —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à
                      console.warn(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è HEX: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: "${escapedString.substring(i, i+5)}..."`);
                      isValid = false; break; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                  }

                  if (isValid) { byteValues = tempByteValues; deobfuscated = true; } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º byteValues —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –±–∞–π—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
              }
         }

         // –®–∞–±–ª–æ–Ω 8: Unicode (loadstring("\u{...}...\u{...}")()) - –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
         // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ï —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ byteValues. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ JS,
         // –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–±–∞–π—Ç–æ–≤–æ–º—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—é —Å—Ç—Ä–æ–∫ –≤ Lua –¥–ª—è
         // –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ.
         if (!deobfuscated && input.includes("\\u{")) {
             let m = input.match(/loadstring\s*\(\s*["']((?:\\u\{[0-9a-fA-F]+\})+)"'\s*\)/);
              if (!m) { // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                 m = input.match(/loadstring\s*\(\s*[']((?:\\u\{[0-9a-fA-F]+\})+)'\s*\)/);
             }
             if(m && m[1]){
                 try {
                     // –ò—Å–ø–æ–ª—å–∑—É–µ–º JS replace —Å String.fromCharCode –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ \u{} —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                     // –≠—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É JS, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã–µ UTF-16 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,
                     // –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. –≠—Ç–æ –æ–±—Ö–æ–¥–∏—Ç —à–∞–≥ byteValues -> TextDecoder.
                     output = m[1].replace(/\\u\{([0-9a-fA-F]+)\}/g,(x,c)=>{
                         const charCode = parseInt(c,16); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥–æ–≤—É—é —Ç–æ—á–∫—É
                         if (!isNaN(charCode)) return String.fromCharCode(charCode); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥–æ–≤—É—é —Ç–æ—á–∫—É –≤ —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ JS
                         // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã–º
                         throw new Error(`–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è Unicode: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (${c}).`);
                     });
                     deobfuscated = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ replace —Å—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ –æ—à–∏–±–∫–∏
                 } catch (e) {
                     console.error("–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è Unicode (String.fromCharCode):", e);
                      // 'deobfuscated' –æ—Å—Ç–∞–µ—Ç—Å—è false, –ø–æ–∑–≤–æ–ª—è—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º.
                 }
             }
         }


         // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É (–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ-ASCII)
         // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–∞–∑–æ–≤—ã–π loadstring("...")()
         // –≠—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –±—É–∫–≤–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫. JS –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–≤–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (\\, \n, \", –∏ —Ç.–¥.),
         // –Ω–æ –º–æ–∂–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–±–∞–π—Ç–æ–≤–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Lua, —Ç–∞–∫–æ–µ –∫–∞–∫ \208\180, –∫–∞–∫ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª.
         // –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.
         if (!deobfuscated) {
              const m = input.match(/loadstring\(\s*["'](.*?)["']\s*\)\(\)/s); // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫
              if (m && m[1] !== undefined) {
                   // –ó–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ JS —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
                   // –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, \\ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è \, \n —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, \" —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è ".
                   // \xHH –∏ \u{...} —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã JS –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–æ–≥–æ—Å—Ç–∏/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
                   // –Ω–æ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ. –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Å–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ –≤—ã—à–µ –ª—É—á—à–µ.
                   output = m[1]; // –ë–µ—Ä–µ–º —Å—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≥—Ä—É–ø–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                   console.warn("Fallback: –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ loadstring. –î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.");
                   deobfuscated = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø–æ–ª–Ω–æ
              }
         }


         // --- –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–π—Ç—ã —Å –ø–æ–º–æ—â—å—é TextDecoder, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã byteValues ---
         // –≠—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ Unicode –∏–ª–∏ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ,
         // —Ç.–∫. –æ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å—Ç—Ä–æ–∫—É 'output'.
         if (deobfuscated && byteValues !== null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ byteValues —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–∞–π—Ç–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
             if (byteValues.length > 0) {
                 try {
                     const decoder = new TextDecoder('utf-8'); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤ –∫–∞–∫ UTF-8
                     output = decoder.decode(new Uint8Array(byteValues));
                 } catch (decodeError) {
                     console.error("–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è (TextDecoder):", decodeError);
                     output = `–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ (–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ UTF-8): ${decodeError.message}`;
                     outputElement.style.borderColor = "#ff9800";
                     deobfuscated = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ, –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                 }
             } else { // byteValues - –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –ø—É—Å—Ç—ã–µ –±–∞–π—Ç—ã)
                 output = ""; // –£—Å–ø–µ—à–Ω–æ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
             }
         }


         // --- –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞/–æ—à–∏–±–æ–∫ ---
         if (!deobfuscated) {
              // –ï—Å–ª–∏ output –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ—É—Å–ø–µ—à–Ω—ã–º —à–∞–≥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ Unicode), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ. –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
              output = output || "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.";
              outputElement.textContent = output; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
              outputElement.style.borderColor = "#ff9800";
         } else if (output === "" && input !== "") {
             // –£—Å–ø–µ—à–Ω–æ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, —Ö–æ—Ç—è –≤–≤–æ–¥ –Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º.
             // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–µ—Ä–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–≤–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏), –Ω–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É.
             output = "–ö–æ–¥ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª –ø—É—Å—Ç–æ–π –∫–æ–¥ –ø–æ—Å–ª–µ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏).";
              outputElement.textContent = output; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
              outputElement.style.borderColor = "#ff9800"; // –¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
         } else if (output !== "") { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ output –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏
             // –£—Å–ø–µ—à–Ω–æ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
              // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.
              if (!output.startsWith('–û—à–∏–±–∫–∞') && !output.startsWith('–ù–µ —É–¥–∞–ª–æ—Å—å')) {
                  outputElement.textContent = output; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                  outputElement.style.borderColor = "#4CAF50"; // –¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞
              } else {
                   // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–π–º–∞–Ω !deobfuscated, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
                   outputElement.textContent = output;
                   outputElement.style.borderColor = "#ff9800";
              }
         }
         // –ï—Å–ª–∏ output –ø—É—Å—Ç–æ–π –∏ input –±—ã–ª –ø—É—Å—Ç—ã–º, –æ–Ω —Ç–∞–∫–∂–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞
         // –∏ output –æ—Å—Ç–∞–µ—Ç—Å—è "" —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.


    } catch (e) {
         console.error("Deobfuscation error:", e);
         output = `–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏: ${e.message}`;
         outputElement.textContent = output; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
         outputElement.style.borderColor = "#ff9800";
    }
}


// --- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–û–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –∫–æ–¥–∞) ---
 function copyCodeToClipboard() {
    const output = document.getElementById("codeOutput"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
    const text = output.textContent;

     const excludedTexts = ['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è...', '–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.', '–û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç', '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'v1 –®–∞–≥', 'v1 –û—à–∏–±–∫–∞', '–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'v2 –®–∞–≥', 'v2 –û—à–∏–±–∫–∞', '–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'v3 –®–∞–≥', 'v3 –û—à–∏–±–∫–∞'];
     if (!text || excludedTexts.some(prefix => text.startsWith(prefix))) {
         alert("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.");
         return;
     }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API Clipboard, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    navigator.clipboard.writeText(text).then(() => {
         const btn = document.querySelector("#codeObfuscator .copy-btn"); // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ —Å–µ–∫—Ü–∏–∏ –∫–æ–¥–∞
         const originalText = btn.textContent;
         btn.textContent = "–°–ö–û–ü–ò–†–û–í–ê–ù–û!";
         btn.classList.add("copied"); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏/—Å—Ç–∏–ª—è
         setTimeout(() => {
             btn.textContent = originalText;
             btn.classList.remove("copied"); // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å
         }, 1500);
    }).catch(err => {
         console.error("Copy error: ", err);
         // –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ —Å execCommand
         try {
              const ta = document.createElement("textarea");
              ta.value = text;
              ta.style.position = "fixed"; ta.style.opacity = "0"; ta.style.left = "-9999px"; ta.style.top = "-9999px";
              document.body.appendChild(ta);
              ta.select();
              const ok = document.execCommand("copy");
              document.body.removeChild(ta);
              const btn = document.querySelector("#codeObfuscator .copy-btn"); // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ —Å–µ–∫—Ü–∏–∏ –∫–æ–¥–∞
              const originalText = btn.textContent;
              if (ok) {
                  btn.textContent = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!";
                  btn.classList.add("copied");
              } else {
                   btn.textContent = "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (fallback)";
              }
              setTimeout(() => {
                  btn.textContent = originalText;
                  btn.classList.remove("copied");
              }, 2000);
         } catch (e) {
              console.error("Fallback copy failed: ", e);
              alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.");
         }
    });
 }

// --- –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ (–û–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –∫–æ–¥–∞) ---
document.getElementById("codeOutput").addEventListener("click", function(event) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
    // –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–±–æ—Ä –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    const excludedTexts = ['–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è...', '–í–≤–µ–¥–∏—Ç–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–Ω–∞—á–∞–ª–∞!', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏.', '–û—à–∏–±–∫–∞ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–û—à–∏–±–∫–∞ –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–î–µ–æ–±—Ñ—É—Å–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç', '–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏', '–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'v1 –®–∞–≥', 'v1 –û—à–∏–±–∫–∞', '–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'v2 –®–∞–≥', 'v2 –û—à–∏–±–∫–∞', '–û–±—Ñ—É—Å–∫–∞—Ü–∏—è v3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'v3 –®–∞–≥', 'v3 –û—à–∏–±–∫–∞'];
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    if (!this.textContent || excludedTexts.some(prefix => this.textContent.startsWith(prefix))) {
         return; // –ï—Å–ª–∏ –¥–∞, –≤—ã—Ö–æ–¥–∏–º
     }
    // –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    try {
         const range = document.createRange();
         range.selectNodeContents(this); // –í—ã–±—Ä–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
         const selection = window.getSelection(); // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç Selection
         selection.removeAllRanges(); // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤—ã–±–æ—Ä–∞
         selection.addRange(range); // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—ã–±–æ—Ä–∞
    } catch (e) {
         console.warn("Could not select text.", e); // –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å
    }
});


// --- –§—É–Ω–∫—Ü–∏—è URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞ (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫ –í–∞—à–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ) ---

function encodeUrl() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML
    const url = document.getElementById('urlInput').value.trim(); // –í–≤–æ–¥ - #urlInput (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω ID)
    const urlOutputContainer = document.getElementById('urlOutputContainer'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–≤–æ–¥–∞ - #urlOutputContainer (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω ID)

    if (!url) {
        alert("Please enter a URL first");
        urlOutputContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å—Å—è - –¢–û–ß–ù–û –∫–∞–∫ –≤ –í–∞—à–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
    const safeChars = new Set(['/', '=', '+', '-', '_', '~', ':']);

    let result = "";
    let i = 0;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º http:// –∏–ª–∏ https:// –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    if (url.startsWith("https://")) {
        result = "https://";
        i = 8; // –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ "https://"
    } else if (url.startsWith("http://")) {
        result = "http://";
        i = 7; // –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ "http://"
    }
    // –ï—Å–ª–∏ URL –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://, i –æ—Å—Ç–∞–µ—Ç—Å—è 0, –∏ –≤—Å—è —Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.

    // –ö–æ–¥–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç—Ä–æ–∫–∏ URL, —Å–∏–º–≤–æ–ª –∑–∞ —Å–∏–º–≤–æ–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è charCodeAt(0)
    // –≠—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª –∏ –ª–æ–≥–∏–∫—É –∏–∑ –í–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞.
    for (; i < url.length; i++) {
        const char = url[i];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –≤ —Å–ø–∏—Å–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö
        if (safeChars.has(char)) {
            result += char; // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞–ø—Ä—è–º—É—é
        } else {
            // –ö–æ–¥–∏—Ä—É–µ–º –∫–æ–¥–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É —Å–∏–º–≤–æ–ª–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—É—é charCodeAt(0)) –∫–∞–∫ %HH
            // –≠—Ç–æ –º–æ–∂–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–µ—Ä–≤–æ–π UTF-16 –∫–æ–¥–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã
            // –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ASCII, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é.
             result += "%" + char.charCodeAt(0).toString(16).toUpperCase().padStart(2, '0');
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ loadstring
    const loadstringCode = `loadstring(game:HttpGet("${result}"))()`;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    urlOutputContainer.innerHTML = `
        <div class="result-box">
            <span class="result-label">OBFUSCATED URL:</span>
            <div class="url-display">${result}</div>
        </div>

        <div class="result-box">
            <span class="result-label">READY-TO-USE LUA CODE:</span>
            <textarea id="urlLuaCode" readonly>${loadstringCode}</textarea> <button class="copy-btn" onclick="copyUrlToClipboard()">COPY TO CLIPBOARD</button> </div>
    `;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å.
}

// --- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (URL –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä) - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫ —Ç–µ–∫—É—â–∏–º –∏–º–µ–Ω–∞–º —Ñ—É–Ω–∫—Ü–∏–π/ID ---
function copyUrlToClipboard() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID textarea –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML
    const textarea = document.getElementById('urlLuaCode'); // ID —ç–ª–µ–º–µ–Ω—Ç–∞ urlLuaCode (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)

    if (!textarea) {
         alert("No code to copy.");
         return;
    }

    textarea.select();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API Clipboard, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    navigator.clipboard.writeText(textarea.value).then(() => {
         const btn = document.querySelector('#urlObfuscator .copy-btn'); // –°–µ–ª–µ–∫—Ç–æ—Ä, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è —Å–µ–∫—Ü–∏–∏ URL
         const originalText = btn.textContent;
         const originalBg = btn.style.backgroundColor; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
         btn.textContent = "COPIED!";
         btn.style.backgroundColor = "#4CAF50"; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
         if (document.body.classList.contains('dark-theme')) {
             btn.style.backgroundColor = "#2e7d32"; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
         }
         setTimeout(() => {
             btn.textContent = originalText;
             btn.style.backgroundColor = originalBg; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
         }, 2000);
    }).catch(err => {
         console.error("Copy error (URL): ", err);
         // –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ —Å execCommand
         try {
              const ta = document.createElement("textarea");
              ta.value = textarea.value;
               ta.style.position = "fixed"; ta.style.opacity = "0"; ta.style.left = "-9999px"; ta.style.top = "-9999px";
               document.body.appendChild(ta);
               ta.select();
               const ok = document.execCommand("copy");
               document.body.removeChild(ta);
               const btn = document.querySelector('#urlObfuscator .copy-btn');
               const originalText = btn.textContent;
               const originalBg = btn.style.backgroundColor;
               if (ok) {
                   btn.textContent = "Copied!";
                   btn.style.backgroundColor = "#4CAF50";
                    if (document.body.classList.contains('dark-theme')) {
                        btn.style.backgroundColor = "#2e7d32";
                    }
               } else {
                    btn.textContent = "Copy Error (fallback)";
               }
               setTimeout(() => {
                   btn.textContent = originalText;
                    btn.style.backgroundColor = originalBg;
               }, 2500);
         } catch (e) {
              console.error("Fallback copy failed (URL): ", e);
              alert("Failed to copy URL code.");
         }
    });
}

 // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ URL
 document.getElementById('urlInput').addEventListener('keypress', function(event) { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ID
     if (event.key === 'Enter') {
         event.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
         encodeUrl(); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
     }
 });
